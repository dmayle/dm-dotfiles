# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[[ -z "$PS1" ]] && return

# Do platform detection so that we can run platform-specific commands later
platform='unknown'
unamestr=$(uname)
if [[ "$unamestr" == "Linux" ]]; then
  platform='linux'
elif [[ "$unamestr" == "Darwin" ]]; then
  platform='osx'
fi

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace:erasedups

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=20000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[[ -z "$LESSOPEN" ]] && [[ -x /usr/bin/lesspipe ]] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [[ -z "$debian_chroot" ]] && [[ -r /etc/debian_chroot ]]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# Choose a 16 color variation of xterm sequence so TMUX knows we have 16 color support
case "$TERM" in
  xterm) export TERM=xterm-256color;;
  xterm-256color) export TERM=xterm-256color;;
esac

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
    screen) PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\033\\"';;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [[ -n "$force_color_prompt" ]]; then
    if [[ -x /usr/bin/tput ]] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [[ "$color_prompt" = yes ]] && [[ -f ~/.dotfiles/bash/prompt.rc ]]; then
    source ~/.dotfiles/bash/prompt.rc
elif [[ "$color_prompt" = yes ]]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[00;35m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [[ -x /usr/bin/dircolors ]]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias lc='ls --color=auto'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [[ -f ~/.bash_aliases ]]; then
    . ~/.bash_aliases
fi

function tmux() {
  TMUX_CMD=$(which tmux)
  if [[ $# != 0 ]]; then
    # Don't break existing commands
    $TMUX_CMD "$@"
    return
  fi

  # TMUX_SOCKET=
  # if [[ -n "$TMUX" ]]; then
  #   TMUX_SOCKET=$(basename $(tmux display-message -p '#{socket_path}'))
  #   TMUX_CMD="${TMUX_CMD} -L ${TMUX_SOCKET} -f ~/.tmux-${TMUX_SOCKET}.conf"
  # fi
  # Extract the session name, group number, and attached state from a session
  # line that looks like:
  # name: session_details [width x height] (optional group) (optional attached)
  SESSION_REGEX='^([^:]*):[^[]*\[[^]]*\] ?(\([^)]*[0-9]\))? ?(\(attached\))?'
  # Just check if the session is attached or not
  ATTACHED_REGEX='\(attached\)$'
  # Look for words of the form 'word0' and extract the word and the number
  TRAILING_NUMBER_REGEX='^(.*[^0-9])?([0-9]+)$'
  # Reading the value directly into the array requires newer bash.  OSX ships
  # with an old enough bash that I'm using a manual loop to read the sessions
  # into the array.
  unset SESSIONS
  while IFS= read -r line; do SESSIONS+=("$line"); done <<< "$($TMUX_CMD list-sessions 2>/dev/null)"
  if [[ ${#SESSIONS[@]} -eq 1 ]]; then
    if [[ -z "${SESSIONS[0]}" ]]; then
      # No existing session, so start tmux with a specially named session
      $TMUX_CMD new -s group0
    elif [[ ${SESSIONS[0]} =~ $ATTACHED_REGEX ]]; then
      # Existing, attached session, so create a new session that groups to it
      [[ ${SESSIONS[0]} =~ $SESSION_REGEX ]] || return -1
      SESSION_NAME="${BASH_REMATCH[1]}"
      [[ "${SESSION_NAME}" =~ $TRAILING_NUMBER_REGEX ]] \
        && $TMUX_CMD new-session -t "$SESSION_NAME" -s "${BASH_REMATCH[1]}$((${BASH_REMATCH[2]} + 1))" \
        || $TMUX_CMD new-session -t "$SESSION_NAME" -s "${SESSION_NAME}0"
    else
      # Default behavior is to attach to an existing session, no matter the name
      $TMUX_CMD
    fi
    return
  fi
  # With multiple existing sessions, we have to get the name of the existing
  # group (like the highlander, there can be only one), and either attach to
  # the first free session, or create a new one if none are free.
  GROUP_NAME=
  FREE_GROUP_SESSION=
  MAX_SESSION_NAME=
  MAX_SESSION_NUM=
  for SESSION in "${SESSIONS[@]}"; do
    [[ ${SESSION} =~ $SESSION_REGEX ]] || return -1
    if [[ -n "$GROUP_NAME" && -n "${BASH_REMATCH[2]}" && "$GROUP_NAME" != "${BASH_REMATCH[2]}" ]]; then
      echo "ERROR: More than one group found"
      $TMUX_CMD list-sessions
      return
    fi
    # Get the name of the group
    if [[ -n "${BASH_REMATCH[2]}" ]]; then
      GROUP_NAME="${BASH_REMATCH[2]}"
      SESSION_NAME="${BASH_REMATCH[1]}"
      if [[ "${SESSION_NAME}" =~ $TRAILING_NUMBER_REGEX ]]; then
        if [[ ${BASH_REMATCH[2]} > $MAX_SESSION_NUM ]]; then
          MAX_SESSION_NUM=${BASH_REMATCH[2]}
          MAX_SESSION_NAME="${BASH_REMATCH[1]}"
        fi
      elif [[ -z "$MAX_SESSION_NAME" ]]; then
        MAX_SESSION_NAME="$SESSION_NAME"
        MAX_SESSION_NUM=0
      fi
      # else we already have a session at level 0, so MAX_SESSION isn't affected
      if [[ ! $SESSION =~ $ATTACHED_REGEX ]]; then
        # In the case of multiple free sessions, this just picks the one
        # closest to the bottom of the list
        FREE_GROUP_SESSION="$SESSION_NAME"
      fi
    fi
    # else this is ungrouped session.  If that's the case, and all sessions are
    # ungrouped, we can't choose which one to join, so we will happily fall
    # through to the end.
  done
  if [[ -n "$FREE_GROUP_SESSION" ]]; then
    $TMUX_CMD attach -t "$FREE_GROUP_SESSION"
  elif [[ -n "$GROUP_NAME" ]]; then
    # We are guaranteed to have a max session by the time we get here
    $TMUX_CMD new-session -t "$SESSION_NAME" -s "${MAX_SESSION_NAME}$((${MAX_SESSION_NUM} + 1))"
  else
    # We can only get here if we have no existing session group, and multiple
    # ungrouped sessions, so we don't know which to join.  Let the user
    # manually decide.
    echo "ERROR: No group, but multiple sessions.  You must manually attach to a group"
    return -1
  fi
}

# Special command to highlight text
function hl() { local R=$1; shift; egrep --color=always "|$R" $@; }

# Two functions to make it switch between using the local X server and X over
# SSH.
function xremote() { export DISPLAY=localhost:10.0; }
function xlocal() { export DISPLAY=:0.0; }

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [[ -f /etc/bash_completion ]] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# Use ssh-reagent to share agents between sessions (screen, etc.)
ssh-reagent () {
  [[ -n "$SSH_AUTH_SOCK" ]] && return
  for agent in $(ls {/tmp,/var/run/ssh-agent}/ssh-*/agent.* 2>/dev/null); do
    export SSH_AUTH_SOCK=$agent
    if ssh-add -l 2>&1 > /dev/null; then
      echo Found working SSH Agent:
      ssh-add -l
      return
    fi
  done
  echo Cannot find ssh agent - restarting...
  eval $(ssh-agent)
  ssh-add
}

# Puppet module scaffold
mkpupmod() {
  mkdir -p "$1"/{files,lib,manifests,templates,tests}
}

# My favorite editor
export EDITOR=$(builtin type -P nvim &> /dev/null && echo nvim || echo vim)

# Allow for platform specific overrides
case "$platform" in
  osx)
    # Fix for when iterm crashes
    alias itermfix='defaults delete net.sourceforge.iTerm "NSWindow Frame iTerm Window 0"'
    # Use color output for directory listings
    alias ls='ls -G'
    alias dir='dir -G'
    alias vdir='vdir -G'
    # Setup boxen
    [[ -f /opt/boxen/env.sh ]] && source /opt/boxen/env.sh
    ;;
  linux)
    ssh-reagent
    ;;
esac

sshagentwrap() {
  if [[ -n "$SSH_AUTH_SOCK" && -L "$SSH_AUTH_SOCK" && ! -e "$SSH_AUTH_SOCK" ]]; then
    # Auth sock is a broken symbolic link. Since the destination no longer
    # exists, assume that it was taken over by ssh at some point, but we're now
    # logged in to the local terminal, so local auth socks should be used.
    OLD_LINK="$SSH_AUTH_SOCK"
    FOUND=0
    for agent in /tmp/ssh-*/agent.*; do
      export SSH_AUTH_SOCK=$agent
      if ssh-add -l 2>&1 > /dev/null; then
        ssh-add -l 2>&1 > /dev/null
        FOUND=1
        break
      fi
    done
    # Not found, so start a new one
    [[ $FOUND -eq 0 ]] && eval $(ssh-agent) && ssh-add
    # Update the symbolic link
    ln -sf "$SSH_AUTH_SOCK" "$OLD_LINK"
    export SSH_AUTH_SOCK="$OLD_LINK"
  fi
  [[ $# -eq 0 ]] && return
  "$1" "${@:2}"
}

logcat_program() {
  local progname="$1"
  if [ -z "$progname" ]; then
    echo "logcat_prgram must be called with a program name to search for"
  fi

  # Remove progname from args so we can pass rest to adb logcat if specified
  shift

  # Spinner Array
  local sp="/-\|"

  # We use time to provide a fixed framerate.  bash's options for fractional
  # time resolution are limited, so we use python if it's available, and
  # fallback to 'date' otherwise
  local fps=1
  local index_command='echo $(( $(date +%s) % 4 ))'
  local wait_command='sleep 1'

  local python_bin=$(which python)
  [ -n "$python_bin" ] && [ -x "$python_bin" ]
  local use_subsecond=$?
  if [ $use_subsecond == 0 ]; then
    fps=6
    index_command="python -c '"'import time; print("%d" % (time.time()*'"$fps""))'"
    wait_command="read -t $(python -c "print(0.1/$fps)")"
  fi

  local index=$(eval $index_command)

  # Use last updated index to avoid unnecessary screen updates
  local last_index=$index

  local pid_command='adb shell ps 2>/dev/null | grep "$progname" | awk '"'"'{print $2}'"'"

  while true; do
    local pid=$(eval $pid_command)

    # The waiting message to print to the screen once
    local waiting_prefix="Waiting for process to start... "

    while [ -z "${pid}" ]; do

      eval $wait_command
      index=$(eval $index_command)
      if [ $index != $last_index ]; then
        last_index=$index
        printf "${waiting_prefix}\b${sp:index%${#sp}:1}"

        # Only show the waiting prefix once
        waiting_prefix=""
      fi

      pid=$(eval $pid_command)

    done

    adb logcat --pid=$pid "$@" &
    local logcat_pid=$!

    while  [ -n "$(eval $pid_command)" ]; do
      sleep 1;
    done

    kill $logcat_pid
  done
}


# Do some PATH smashing (Ensures /usr/local/bin,sbin end up in the PATH, even
# if they aren't already there).
if ! [[ "$PATH" =~ (^|:)$HOME/.bin(:|$) ]]; then
  export PATH="$HOME/.bin:$PATH"
fi
if ! [[ "$PATH" =~ (^|:)/usr/local/bin(:|$) ]]; then
  export PATH="/usr/local/bin:$PATH"
fi
if ! [[ "$PATH" =~ (^|:)/usr/local/sbin(:|$) ]]; then
  export PATH="/usr/local/sbin:$PATH"
fi
# Support running a local specific bashrc
if [[ -f ~/.bashrc_local ]]; then
    . ~/.bashrc_local
fi
#CHEF.NO.SOURCE
